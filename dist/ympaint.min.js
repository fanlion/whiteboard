window["YMPaintSDK"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./dist";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 形状基础类
 *
 * @class ShapeBase
 */
var ShapeBase = /** @class */ (function () {
    function ShapeBase(color, lineWidth, type) {
        if (color === void 0) { color = 'black'; }
        if (lineWidth === void 0) { lineWidth = 0; }
        this.color = color;
        this.lineWidth = lineWidth;
        this.type = type;
    }
    return ShapeBase;
}());
exports.default = ShapeBase;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 点
 *
 * @class Point
 */
var Point = /** @class */ (function () {
    /**
     * Creates an instance of Point.
     * @param {number} [x=0]
     * @param {number} [y=0]
     * @memberof Point
     */
    function Point(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.x = x;
        this.y = y;
    }
    return Point;
}());
exports.default = Point;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isDebug = false;
exports.version = '1.0.0';
var Paint_1 = __webpack_require__(3);
var Point_1 = __webpack_require__(1);
var Circle_1 = __webpack_require__(4);
var Rectangle_1 = __webpack_require__(5);
var Curve_1 = __webpack_require__(6);
var Arrow_1 = __webpack_require__(7);
var Line_1 = __webpack_require__(8);
var Triangle_1 = __webpack_require__(9);
var Types_1 = __webpack_require__(10);
exports.ShapeType = Types_1.ShapeType;
/**
 * YMPaint
 *
 * @export
 * @class YMPaint
 */
var YMPaint = /** @class */ (function () {
    function YMPaint(config, listeners) {
        this.canvas = config.canvas;
        this.paint = new Paint_1.default(this.canvas);
        this.listeners = listeners;
        this.color = config.color || 'black';
        this.lineWidth = config.lineWidth || 2;
        this.radius = config.radius || 0;
        this.shape = config.shape || 'line';
        this.angle = 0;
        this.range = 25;
        this.beginPoint = new Point_1.default();
        this.stopPoint = new Point_1.default();
        this.rect = new Rectangle_1.default();
        this.triangle = new Triangle_1.default();
        this.points = [];
        this.history = [];
        // 绑定事件
        this.bindEvent();
    }
    /**
     * 鼠标mousedown事件处理器
     *
     * @private
     * @param {MouseEvent} e
     * @memberof YMPaint
     */
    YMPaint.prototype.handleMouseDown = function (e) {
        var x = e.clientX;
        var y = e.clientY;
        this.drawing = true;
        if (this.shape === 'rect') {
            this.beginPoint.x = x;
            this.beginPoint.y = y;
        }
        else if (this.shape === 'curve') {
            this.points.push(new Point_1.default(x, y));
            this.paint.drawPoint(this.points, this.lineWidth, this.color);
        }
        else if (this.shape === 'circle') {
            this.beginPoint.x = x;
            this.beginPoint.y = y;
        }
        else if (this.shape === 'arrow') {
            this.beginPoint.x = x;
            this.beginPoint.y = y;
        }
        else if (this.shape === 'line') {
            this.beginPoint.x = x;
            this.beginPoint.y = y;
        }
    };
    /**
     * 鼠标mousemove事件处理器
     *
     * @private
     * @param {MouseEvent} e
     * @memberof YMPaint
     */
    YMPaint.prototype.handleMouseMove = function (e) {
        if (this.drawing) {
            if (this.shape === Types_1.ShapeType.Rectangle) {
                this.rect.width = Math.abs(this.beginPoint.x - e.clientX);
                this.rect.height = Math.abs(this.beginPoint.y - e.clientY);
                // 确定正确的矩形左上角坐标
                if (this.beginPoint.x > e.clientX) {
                    this.rect.x = e.clientX;
                }
                else {
                    this.rect.x = this.beginPoint.x;
                }
                if (this.beginPoint.y > e.clientY) {
                    this.rect.y = e.clientY;
                }
                else {
                    this.rect.y = this.beginPoint.y;
                }
                this.paint.clean();
                this.redrawAll();
                this.paint.drawRect(this.rect.x, this.rect.y, this.rect.width, this.rect.height, this.radius, this.color, this.lineWidth);
            }
            else if (this.shape === Types_1.ShapeType.Curve) {
                this.points.push(new Point_1.default(e.clientX, e.clientY));
                this.paint.drawPoint(this.points, this.lineWidth, this.color);
            }
            else if (this.shape === Types_1.ShapeType.Circle) {
                var pointX = 0, pointY = 0;
                if (this.beginPoint.x > e.clientX) {
                    pointX = this.beginPoint.x - Math.abs(this.beginPoint.x - e.clientX) / 2;
                }
                else {
                    pointX = Math.abs(this.beginPoint.x - e.clientX) / 2 + this.beginPoint.x;
                }
                if (this.beginPoint.y > e.clientY) {
                    pointY = this.beginPoint.y - Math.abs(this.beginPoint.y - e.clientY) / 2;
                }
                else {
                    pointY = Math.abs(this.beginPoint.y - e.clientY) / 2 + this.beginPoint.y;
                }
                var lineX = Math.abs(this.beginPoint.x - e.clientX) / 2;
                var lineY = Math.abs(this.beginPoint.y - e.clientY) / 2;
                this.paint.clean();
                this.redrawAll();
                this.paint.drawEllipse(pointX, pointY, lineX, lineY, this.lineWidth, this.color);
            }
            else if (this.shape === Types_1.ShapeType.Arrow) {
                this.stopPoint.x = e.clientX;
                this.stopPoint.y = e.clientY;
                this.paint.clean();
                this.redrawAll();
                this.paint.drawArrow(this.beginPoint, this.stopPoint, this.color, this.range);
            }
            else if (this.shape === Types_1.ShapeType.Line) {
                var stopPoint = new Point_1.default(e.clientX, e.clientY);
                this.paint.clean();
                this.redrawAll();
                this.paint.drawLine(this.beginPoint, stopPoint, this.color, this.lineWidth);
            }
        }
    };
    /**
     * 鼠标mouseup事件处理器
     *
     * @private
     * @param {MouseEvent} e
     * @memberof YMPaint
     */
    YMPaint.prototype.handleMouseUp = function (e) {
        if (this.shape === Types_1.ShapeType.Rectangle) {
            var rect = new Rectangle_1.default(this.rect.x, this.rect.y, this.rect.width, this.rect.height, this.radius, this.color, this.lineWidth);
            this.rect = new Rectangle_1.default();
            this.history.push(rect);
            // 回调
            this.listeners && this.listeners.onDrawing && this.listeners.onDrawing(rect);
        }
        else if (this.shape === Types_1.ShapeType.Curve) {
            var curve = new Curve_1.default(this.points, this.color, this.lineWidth);
            this.history.push(curve);
            this.points = [];
            // 回调
            this.listeners && this.listeners.onDrawing && this.listeners.onDrawing(curve);
        }
        else if (this.shape === Types_1.ShapeType.Circle) {
            var pointX = 0, pointY = 0;
            if (this.beginPoint.x > e.clientX) {
                pointX = this.beginPoint.x - Math.abs(this.beginPoint.x - e.clientX) / 2;
            }
            else {
                pointX = Math.abs(this.beginPoint.x - e.clientX) / 2 + this.beginPoint.x;
            }
            if (this.beginPoint.y > e.clientY) {
                pointY = this.beginPoint.y - Math.abs(this.beginPoint.y - e.clientY) / 2;
            }
            else {
                pointY = Math.abs(this.beginPoint.y - e.clientY) / 2 + this.beginPoint.y;
            }
            var lineX = Math.abs(this.beginPoint.x - e.clientX) / 2;
            var lineY = Math.abs(this.beginPoint.y - e.clientY) / 2;
            var circle = new Circle_1.default(pointX, pointY, lineX, lineY, this.color, this.lineWidth);
            this.history.push(circle);
            this.beginPoint = new Point_1.default();
            // 回调
            this.listeners && this.listeners.onDrawing && this.listeners.onDrawing(circle);
        }
        else if (this.shape === Types_1.ShapeType.Arrow) {
            var arrow = new Arrow_1.default(this.beginPoint, new Point_1.default(e.clientX, e.clientY), this.range, this.color, this.lineWidth);
            this.history.push(arrow);
            this.beginPoint = new Point_1.default();
            // 回调
            this.listeners && this.listeners.onDrawing && this.listeners.onDrawing(arrow);
        }
        else if (this.shape === Types_1.ShapeType.Line) {
            var stopPoint = new Point_1.default(e.clientX, e.clientY);
            var line = new Line_1.default(this.beginPoint, stopPoint, this.color, this.lineWidth);
            this.history.push(line);
            this.beginPoint = new Point_1.default();
            // 回调
            this.listeners && this.listeners.onDrawing && this.listeners.onDrawing(line);
        }
        this.drawing = false;
    };
    /**
     * 绑定事件
     *
     * @private
     * @memberof YMPaint
     */
    YMPaint.prototype.bindEvent = function () {
        // 给canvas绑定事件
        this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this), false);
        this.canvas.addEventListener('mousemove', this.throttle(this.handleMouseMove, 10), false);
        this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this), false);
    };
    /**
     * 重绘历史记录中的所有元素
     *
     * @memberof YMPaint
     */
    YMPaint.prototype.redrawAll = function () {
        var self = this;
        this.history.forEach(function (item) {
            self.draw(item);
        });
    };
    YMPaint.prototype.draw = function (item) {
        if (item.type === Types_1.ShapeType.Rectangle) {
            // @ts-ignore
            this.paint.drawRect(item.x, item.y, item.width, item.height, item.radius, item.color, item.lineWidth);
        }
        else if (item.type === Types_1.ShapeType.Curve) {
            // @ts-ignore
            this.paint.drawPoint(item.points, item.lineWidth, item.color);
        }
        else if (item.type === Types_1.ShapeType.Circle) {
            // @ts-ignore
            this.paint.drawEllipse(item.x, item.y, item.a, item.b, item.lineWidth, item.color);
        }
        else if (item.type === Types_1.ShapeType.Arrow) {
            console.log('浏览器绘画', item);
            // @ts-ignore
            this.paint.drawArrow(item.beginPoint, item.stopPoint, item.color, item.range);
        }
        else if (item.type === Types_1.ShapeType.Line) {
            // @ts-ignore
            this.paint.drawLine(item.begin, item.end, item.color, item.lineWidth);
        }
    };
    YMPaint.prototype.setColor = function (color) {
        this.color = color;
    };
    YMPaint.prototype.getColor = function () {
        return this.color;
    };
    YMPaint.prototype.setShape = function (shape) {
        this.shape = shape;
    };
    YMPaint.prototype.getShape = function () {
        return this.shape;
    };
    /**
     * 撤销一步
     *
     * @memberof YMPaint
     */
    YMPaint.prototype.undo = function () {
        if (this.history.length > 0) {
            this.history.pop();
            // 撤销后重绘
            this.paint.clean();
            this.redrawAll();
        }
    };
    /**
     * 清屏
     *
     * @memberof YMPaint
     */
    YMPaint.prototype.cleanAll = function () {
        this.history = [];
        this.paint.clean();
    };
    /**
     * 函数节流
     *
     * @static
     * @param {Function} callback
     * @param {number} delay
     * @returns {Function}
     * @memberof YMPaint
     */
    YMPaint.prototype.throttle = function (callback, delay) {
        var self = this;
        var previousCall = new Date().getTime();
        return function () {
            var time = new Date().getTime();
            if ((time - previousCall) >= delay) {
                previousCall = time;
                callback.apply(self, arguments);
            }
        };
    };
    return YMPaint;
}());
exports.YMPaint = YMPaint;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Point_1 = __webpack_require__(1);
/**
 * 绘画逻辑
 *
 * @class Paint
 */
var Paint = /** @class */ (function () {
    function Paint(canvas) {
        this.canvas = canvas;
        this.context = canvas.getContext('2d');
    }
    /**
     * 画点
     *
     * @param {Point[]} points
     * @param {number} lineWidth
     * @param {string} color
     * @memberof Paint
     */
    Paint.prototype.drawPoint = function (points, lineWidth, color) {
        for (var i = 0; i < points.length; i++) {
            this.context.beginPath();
            if (points[i].y && i) {
                this.context.moveTo(points[i - 1].x, points[i - 1].y);
            }
            else {
                this.context.moveTo(points[i].x - 1, points[i].y);
            }
            this.context.lineWidth = lineWidth;
            this.context.strokeStyle = color;
            this.context.lineTo(points[i].x, points[i].y);
            this.context.closePath();
            this.context.stroke();
        }
    };
    /**
     * 画椭圆
     *
     * @param {number} x
     * @param {number} y
     * @param {number} a
     * @param {number} b
     * @param {number} lineWidth
     * @param {string} color
     * @memberof Paint
     */
    Paint.prototype.drawEllipse = function (x, y, a, b, lineWidth, color) {
        this.context.beginPath();
        this.context.ellipse(x, y, a, b, 0, 0, 2 * Math.PI);
        this.context.lineWidth = lineWidth;
        this.context.fillStyle = 'rgba(0, 0, 0, 0)';
        this.context.strokeStyle = color;
        this.context.fill();
        this.context.stroke();
    };
    Paint.prototype.createRect = function (x, y, width, height, radius, color, type, lineWidth) {
        this.context.beginPath();
        this.context.moveTo(x, y + radius);
        this.context.lineTo(x, y + height - radius);
        this.context.quadraticCurveTo(x, y + height, x + radius, y + height);
        this.context.lineTo(x + width - radius, y + height);
        this.context.quadraticCurveTo(x + width, y + height, x + width, y + height - radius);
        this.context.lineTo(x + width, y + radius);
        this.context.quadraticCurveTo(x + width, y, x + width - radius, y);
        this.context.lineTo(x + radius, y);
        this.context.quadraticCurveTo(x, y, x, y + radius);
        // @ts-ignore
        this.context[type + 'Style'] = color;
        this.context.lineWidth = lineWidth;
        this.context.closePath();
        // @ts-ignore
        this.context[type]();
    };
    /**
     * 画空心矩形
     *
     * @private
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     * @param {number} radius
     * @param {string} color
     * @param {number} lineWidth
     * @memberof Paint
     */
    Paint.prototype.drawRect = function (x, y, width, height, radius, color, lineWidth) {
        this.createRect(x, y, width, height, radius, color, 'stroke', lineWidth);
    };
    Paint.prototype.arrowCoord = function (beginPoint, stopPoint, range) {
        var polygonVertex = [];
        polygonVertex[0] = beginPoint.x;
        polygonVertex[1] = beginPoint.y;
        polygonVertex[6] = stopPoint.x;
        polygonVertex[7] = stopPoint.y;
        // 获取弧度
        var angle = Math.atan2(stopPoint.y - beginPoint.y, stopPoint.x - beginPoint.x) / Math.PI * 180;
        polygonVertex[8] = stopPoint.x - Paint.edgeLen * Math.cos(Math.PI / 180 * (angle + range));
        polygonVertex[9] = stopPoint.y - Paint.edgeLen * Math.sin(Math.PI / 180 * (angle + range));
        polygonVertex[4] = stopPoint.x - Paint.edgeLen * Math.cos(Math.PI / 180 * (angle - range));
        polygonVertex[5] = stopPoint.y - Paint.edgeLen * Math.sin(Math.PI / 180 * (angle - range));
        return polygonVertex;
    };
    Paint.prototype.sideCoord = function (polygonVertex) {
        var x = (polygonVertex[4] + polygonVertex[8]) / 2;
        var y = (polygonVertex[5] + polygonVertex[9]) / 2;
        var midPoint = new Point_1.default(x, y);
        polygonVertex[2] = (polygonVertex[4] + midPoint.x) / 2;
        polygonVertex[3] = (polygonVertex[5] + midPoint.y) / 2;
        polygonVertex[10] = (polygonVertex[8] + midPoint.x) / 2;
        polygonVertex[11] = (polygonVertex[9] + midPoint.y) / 2;
    };
    /**
     * 画箭头
     *
     * @param {Point} beginPoint
     * @param {Point} stopPoint
     * @param {string} color
     * @param {number} range
     * @memberof Paint
     */
    Paint.prototype.drawArrow = function (beginPoint, stopPoint, color, range) {
        var polygonVertex = this.arrowCoord(beginPoint, stopPoint, range);
        this.sideCoord(polygonVertex);
        this.context.fillStyle = color;
        this.context.beginPath();
        this.context.moveTo(polygonVertex[0], polygonVertex[1]);
        this.context.lineTo(polygonVertex[2], polygonVertex[3]);
        this.context.lineTo(polygonVertex[4], polygonVertex[5]);
        this.context.lineTo(polygonVertex[6], polygonVertex[7]);
        this.context.lineTo(polygonVertex[8], polygonVertex[9]);
        this.context.lineTo(polygonVertex[10], polygonVertex[11]);
        this.context.closePath();
        this.context.fill();
    };
    /**
     * 绘制直线
     *
     * @param {Point} beginPoint
     * @param {Point} stopPoint
     * @param {string} color
     * @param {number} lineWidth
     * @memberof Paint
     */
    Paint.prototype.drawLine = function (beginPoint, stopPoint, color, lineWidth) {
        this.context.beginPath();
        this.context.strokeStyle = color;
        this.context.lineWidth = lineWidth;
        this.context.moveTo(beginPoint.x, beginPoint.y);
        this.context.lineTo(stopPoint.x, stopPoint.y);
        this.context.closePath();
        this.context.stroke();
    };
    /**
     * 画三角形
     *
     * @param {Point} top
     * @param {Point} left
     * @param {Point} right
     * @param {string} color
     * @param {number} lineWidth
     * @memberof Paint
     */
    Paint.prototype.drawTriangle = function (top, left, right, color, lineWidth) {
        this.context.beginPath();
        this.context.strokeStyle = color;
        this.context.lineWidth = lineWidth;
        this.context.moveTo(top.x, top.y);
        this.context.lineTo(right.x, right.y);
        this.context.lineTo(left.x, left.y);
        this.context.closePath();
    };
    Paint.prototype.drawTriangle2 = function (beginPoint, stopPoint) {
    };
    /**
     * 清空画板
     *
     * @memberof Paint
     */
    Paint.prototype.clean = function () {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };
    Paint.edgeLen = 25;
    Paint.angle = 15;
    return Paint;
}());
exports.default = Paint;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ShapeBase_1 = __webpack_require__(0);
var Types_1 = __webpack_require__(10);
/**
 * 圆
 *
 * @class Circle
 * @extends {ShapeBase}
 */
var Circle = /** @class */ (function (_super) {
    __extends(Circle, _super);
    function Circle(x, y, a, b, color, lineWidth) {
        var _this = _super.call(this, color, lineWidth, Types_1.ShapeType.Circle) || this;
        _this.x = x;
        _this.y = y;
        _this.a = a;
        _this.b = b;
        return _this;
    }
    return Circle;
}(ShapeBase_1.default));
exports.default = Circle;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ShapeBase_1 = __webpack_require__(0);
var Types_1 = __webpack_require__(10);
/**
 * 矩形
 *
 * @class Rectangle
 * @extends {ShapeBase}
 */
var Rectangle = /** @class */ (function (_super) {
    __extends(Rectangle, _super);
    function Rectangle(x, y, width, height, radius, color, lineWidth) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        if (radius === void 0) { radius = 0; }
        if (color === void 0) { color = ''; }
        if (lineWidth === void 0) { lineWidth = 0; }
        var _this = _super.call(this, color, lineWidth, Types_1.ShapeType.Rectangle) || this;
        _this.x = x;
        _this.y = y;
        _this.width = width;
        _this.height = height;
        _this.radius = radius;
        return _this;
    }
    return Rectangle;
}(ShapeBase_1.default));
exports.default = Rectangle;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ShapeBase_1 = __webpack_require__(0);
var Types_1 = __webpack_require__(10);
/**
 * 曲线(自由划线)
 *
 * @class Curve
 * @extends {ShapeBase}
 */
var Curve = /** @class */ (function (_super) {
    __extends(Curve, _super);
    function Curve(points, color, lineWidth) {
        var _this = _super.call(this, color, lineWidth, Types_1.ShapeType.Curve) || this;
        _this.points = points;
        return _this;
    }
    return Curve;
}(ShapeBase_1.default));
exports.default = Curve;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ShapeBase_1 = __webpack_require__(0);
var Types_1 = __webpack_require__(10);
/**
 * 箭头
 *
 * @class Arrow
 * @extends {ShapeBase}
 */
var Arrow = /** @class */ (function (_super) {
    __extends(Arrow, _super);
    function Arrow(beginPoint, stopPoint, range, color, lineWidth) {
        if (lineWidth === void 0) { lineWidth = 0; }
        var _this = _super.call(this, color, lineWidth, Types_1.ShapeType.Arrow) || this;
        _this.beginPoint = beginPoint;
        _this.stopPoint = stopPoint;
        _this.range = range;
        return _this;
    }
    return Arrow;
}(ShapeBase_1.default));
exports.default = Arrow;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ShapeBase_1 = __webpack_require__(0);
var Types_1 = __webpack_require__(10);
/**
 * 直线
 *
 * @class Line
 * @extends {ShapeBase}
 */
var Line = /** @class */ (function (_super) {
    __extends(Line, _super);
    function Line(begin, end, color, lineWidth) {
        var _this = _super.call(this, color, lineWidth, Types_1.ShapeType.Line) || this;
        _this.begin = begin;
        _this.end = end;
        return _this;
    }
    return Line;
}(ShapeBase_1.default));
exports.default = Line;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ShapeBase_1 = __webpack_require__(0);
var Point_1 = __webpack_require__(1);
var Types_1 = __webpack_require__(10);
/**
 * 三角形
 *
 * @class Triangle
 * @extends {ShapeBase}
 */
var Triangle = /** @class */ (function (_super) {
    __extends(Triangle, _super);
    function Triangle(top, left, right, color, lineWidth) {
        if (top === void 0) { top = new Point_1.default(); }
        if (left === void 0) { left = new Point_1.default(); }
        if (right === void 0) { right = new Point_1.default(); }
        if (color === void 0) { color = ''; }
        if (lineWidth === void 0) { lineWidth = 0; }
        var _this = _super.call(this, color, lineWidth, Types_1.ShapeType.Triangle) || this;
        _this.topPoint = top;
        _this.leftPoint = left;
        _this.rightPoint = right;
        return _this;
    }
    return Triangle;
}(ShapeBase_1.default));
exports.default = Triangle;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * Shape类型
 * @enum {number}
 */
var ShapeType;
(function (ShapeType) {
    ShapeType["Rectangle"] = "rect";
    ShapeType["Circle"] = "circle";
    ShapeType["Line"] = "line";
    ShapeType["Arrow"] = "arrow";
    ShapeType["Point"] = "point";
    ShapeType["Triangle"] = "triangle";
    ShapeType["Curve"] = "curve";
})(ShapeType || (ShapeType = {}));
exports.ShapeType = ShapeType;
;


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,